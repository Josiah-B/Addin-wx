<Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Add_InWx" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" x:Class="MainWindow"
    Title="MainWindow" x:Name="MainUI" Height="593.015" Width="856.582" Closing="Window_Closing" Loaded="MainWindow_Loaded" WindowStartupLocation="Manual" Icon="Icons/Sun.ico" WindowState="Maximized">

    <Window.Resources>
        <local:InvertedBoolToWindowStyle x:Key="CustomBoolToVisibility"/>
        <LinearGradientBrush x:Key="TabButtonBrush" EndPoint="0.5,0" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0.3">
            <GradientStop Color="#59FFFFFF" Offset="1"/>
            <GradientStop Color="#75FFFFFF"/>
            <GradientStop Color="#B2FFFFFF" Offset="0.702"/>
            <GradientStop Color="#59FFFFFF" Offset="0.902"/>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="TabBackGroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#97BAE0FF" Offset="1"/>
            <GradientStop Color="#33FBFCFF"/>
        </LinearGradientBrush>
        <!--<Image x:Key="CurrentImageSource" Source="/Add_InWx;component/Backgrounds/IMG_1788_stitch of 13 for 73-2.jpg"/>-->
        <!-- Simple TabControl 
	This template uses Simple TabItem for each Tab. The TabItems are placed in the TabPanel
	Limitations : The Simple TabControl only allow the Tabs to be shown at the top of the Tab control. You can re-position the TabPanel to change this-->

        <Style x:Key="TabControlStyle1" TargetType="{x:Type TabControl}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid  Width="Auto" KeyboardNavigation.TabNavigation="Local" HorizontalAlignment="Left">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <TabPanel Grid.Row="0" Grid.Column="0" Margin="0,0,-1,4" VerticalAlignment="Center" x:Name="HeaderPanel" Background="Transparent" IsItemsHost="True" Panel.ZIndex="1" KeyboardNavigation.TabIndex="1" HorizontalAlignment="Left">
                                <TabPanel.LayoutTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="-90"/>
                                    </TransformGroup>
                                </TabPanel.LayoutTransform>
                            </TabPanel>

                            <Border Grid.Row="0" Grid.Column="1" x:Name="cBorder" Background="{StaticResource TabBackGroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" CornerRadius="2" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.TabIndex="2">
                                <!-- The implementation switches the content. This control must be named PART_SelectedContentHost -->
                                <ContentPresenter Margin="0" Width="150" x:Name="PART_SelectedContentHost" ContentSource="SelectedContent"/>
                            </Border>
                        </Grid>

                        <ControlTemplate.Triggers>

                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="cBorder"/>
                            </Trigger>
                            <Trigger Property="SelectedIndex" Value="-1">
                                <Setter Property="Visibility" Value="Collapsed" TargetName="PART_SelectedContentHost"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="false">
                                <Setter Property="SelectedIndex" Value="-1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--Simple TabItem -->
        <Style d:IsControlPart="True" TargetType="{x:Type TabItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid>
                            <Border Margin="0,-4,1,0" x:Name="Border" Height="Auto" Width="Auto" Background="{DynamicResource TabButtonBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="20,20,0,0" VerticalAlignment="Bottom">
                                <ContentPresenter Height="Auto" Width="Auto" HorizontalAlignment="Center" Margin="10,0" x:Name="ContentSite" VerticalAlignment="Center" RecognizesAccessKey="True" ContentSource="Header"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="false"/>
                                    <Condition Property="IsSelected" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Opacity" Value="0.5"/>
                            </MultiTrigger>

                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Opacity" Value="1"/>
                                <Setter Property="LayoutTransform" TargetName="Border">
                                    <Setter.Value>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1.3" ScaleY="1.3"/>
                                        </TransformGroup>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>

                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Panel.ZIndex" Value="100"/>
                                <!--<Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" TargetName="Border"/>-->
                                <Setter Property="Opacity" Value="1" TargetName="Border"/>
                                <Setter Property="BorderThickness" Value="1,1,1,0" TargetName="Border"/>
                                <Setter Property="LayoutTransform" TargetName="Border">
                                    <Setter.Value>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1.3" ScaleY="1.3"/>
                                        </TransformGroup>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ListBoxStyle1" TargetType="{x:Type ListBox}">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="Background" Value="{x:Null}"/>
            <Setter Property="BorderBrush" Value="#FFAAAAAA"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBox}">
                        <Grid>
                            <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                            <ScrollViewer Margin="0" Style="{DynamicResource SimpleScrollViewer}" Focusable="false" Background="{TemplateBinding Background}">

                                <!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
                                <StackPanel Margin="1" IsItemsHost="true"/>
                            </ScrollViewer>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" Value="{x:Null}" TargetName="Border"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="CustomSimpleToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>
            <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CustomNormalBorderBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">

                        <!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Grid x:Name="LayoutGrid" Width="24" Height="24" Opacity="0.75" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                                    <!--<Path x:Name="CheckMark" Stroke="{DynamicResource GlyphBrush}" StrokeThickness="2" SnapsToDevicePixels="False" Data="M 0 0 L 13 13 M 0 13 L 13 0"/>-->
                                </Grid>
                            </BulletDecorator.Bullet>
                            <!--<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>-->
                        </BulletDecorator>

                        <!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="false">
                                <!--<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>-->
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <!--<Setter Property="Background" Value="{DynamicResource MouseOverBrush}" TargetName="Border"/>-->
                            </Trigger>
                            <EventTrigger RoutedEvent="MouseEnter">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="LayoutGrid" Storyboard.TargetProperty="Width" To="32" Duration="0:0:0.2"></DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="LayoutGrid" Storyboard.TargetProperty="Height" To="32" Duration="0:0:0.2"></DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="LayoutGrid" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2"></DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="MouseLeave">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="LayoutGrid" Storyboard.TargetProperty="Width" To="24" Duration="0:0:0.1"></DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="LayoutGrid" Storyboard.TargetProperty="Height" To="24" Duration="0:0:0.1"></DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="LayoutGrid" Storyboard.TargetProperty="Opacity" To="0.75" Duration="0:0:0.2"></DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <Trigger Property="IsPressed" Value="true">
                                <!--<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>-->
                                <Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <!--<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>-->
                                <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ImageBrush x:Key="DefaultBackgroundImageBrush" ImageSource="/Add_InWx;component/Backgrounds/_MG_5695.jpg"/>
    </Window.Resources>
    <Window.Background>
        <ImageBrush x:Name="MainBackground" ImageSource="/Add_InWx;component/Backgrounds/_MG_5695.jpg"/>
    </Window.Background>
    <Grid x:Name="LayoutRoot">
        <Grid.RowDefinitions>
            <RowDefinition Height="0.2*"/>
            <RowDefinition Height="2*"/>
            <!--<RowDefinition Height="0.1*"/>-->
        </Grid.RowDefinitions>
        <ContentPresenter x:Name="ViewsShower" Grid.Row="1" DataContext="{Binding SelectedItem, ElementName=MainTitleBar.MainList}" Width="Auto" Height="Auto" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Content="{Binding Path=SelectedItem, ElementName=ViewsList}"/>
        <!--<local:OptionsTabsControl x:Name="OptionsTab" HorizontalAlignment="Left" Visibility="Collapsed"/>-->
        <Button VerticalAlignment="Top" HorizontalAlignment="Left" Click="Button_Click">
            <Image Width="24">
                <Image.Source>
                    <BitmapImage DecodePixelWidth="24" UriSource="Icons/Gears.png"/>
                </Image.Source>
            </Image>
        </Button>
        <TabControl Grid.RowSpan="3" Grid.Row="0" x:Name="RightViews" Style="{DynamicResource TabControlStyle1}" HorizontalAlignment="Right" Visibility="Visible">
            <TabItem x:Name="ViewsTab" Header="Views" BorderBrush="{x:Null}">
                <Grid>
                    <ListBox x:Name="ViewsList" Style="{DynamicResource ListBoxStyle1}" Background="{x:Null}" BorderBrush="#FFAAAAAA" Margin="2" ItemsSource="{Binding}">
                        <ListBox.ItemContainerStyle>
                            <Style TargetType="ListBoxItem">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ListBoxItem">
                                            <Border x:Name="cBorder" CornerRadius="0" Width="125" HorizontalAlignment="Stretch" Padding="1" Margin="5" Background="white" BorderBrush="Green" BorderThickness="1">
                                                <Viewbox>
                                                    <ContentPresenter Content="{Binding Path=ViewName}"/>

                                                </Viewbox>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsSelected" Value="true">
                                                    <Setter TargetName="cBorder" Property="BorderBrush" Value="Red"/>
                                                    <Setter TargetName="cBorder" Property="BorderThickness" Value="1"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListBox.ItemContainerStyle>
                    </ListBox>
                </Grid>
            </TabItem>
            <TabItem x:Name="StationManagerTab" Header="Station Manager">
                <Grid/>
            </TabItem>
        </TabControl>
        <local:TitleBar x:Name="MainTitleBar" VerticalAlignment="Top" Margin="0" Grid.Column="0" Grid.Row="0" Grid.RowSpan="3" HorizontalContentAlignment="Center" MinWidth="20"/>
        <Button HorizontalAlignment="Right" Width="16" Height="16" VerticalAlignment="Top" Margin="0,1,30,0" Click="Button_Click_1" ToolTip="Credits"/>
        <ToggleButton x:Name="WindowMode" Style="{StaticResource CustomSimpleToggleButton}" VerticalAlignment="Top" HorizontalAlignment="Right" Click="WindowMode_Click"  Margin="2">
            <ToggleButton.BorderBrush>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FF4D4D4D" Offset="0"/>
                    <GradientStop Color="#FFBBBBBB" Offset="1"/>
                </LinearGradientBrush>
            </ToggleButton.BorderBrush>
            <ToggleButton.Background>
                <ImageBrush ImageSource="Icons/1415668503_view-fullscreen-128.png" Stretch="Fill"/>
            </ToggleButton.Background>
        </ToggleButton>
        <!--<Border CornerRadius="0,0,5,5" Grid.Row="0" Width="12" Height="12" VerticalAlignment="Top" HorizontalAlignment="Left" MouseLeftButtonUp="DebugOutput_Click" Margin="32,0,0,0" Background="{DynamicResource BrushForButtonBackGround}"/>-->
        <Button Grid.Row="0" Width="16" Height="16" VerticalAlignment="Top" HorizontalAlignment="Left" Click="DebugOutput_Click" Margin="30,1,0,0" ToolTip="Debug Output">
            <!--<Image Width="12">
                <Image.Source>
                    <BitmapImage DecodePixelWidth="12" UriSource="Icons/Gears.png"/>
                </Image.Source>
            </Image>-->
        </Button>
    </Grid>
</Window>
